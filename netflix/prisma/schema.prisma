// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// generator client:
// ये एक generator block है, जो Prisma को बताता है कि किस तरह का कोड जेनरेट करना है।
// यहाँ client का मतलब है कि हम Prisma को एक Prisma Client जेनरेट करने के लिए कह रहे हैं, जो हमें हमारे डेटाबेस के साथ काम करने में मदद करेगा।
// provider = "prisma-client-js":
// provider ये बताता है कि किस तरह का क्लाइंट जेनरेट करना है।
// "prisma-client-js" का मतलब है कि Prisma एक JavaScript/TypeScript क्लाइंट जेनरेट करेगा, जिसे हम अपने Node.js एप्लिकेशन में यूज़ कर सकते हैं।
// इस क्लाइंट की मदद से आप अपने डेटाबेस के साथ आसानी से CRUD ऑपरेशन्स (Create, Read, Update, Delete) कर सकते हैं।
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// id: Field name
// String: Field type in Prisma (as a string)
// @id: Marks the field as the primary key
// @default(auto()): Automatically generates an ObjectId
// @map("_id"): Maps the Prisma id field to MongoDB’s _id field
// @db.ObjectId: Specifies that MongoDB stores it as an ObjectId
model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAR DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  session Session[]
  accounts Account[]

  @@map("users")

}
 

// differecnce between @unique and @@Unique([])
// provider String @unique: Ensures that the provider field is unique on its own, which doesn't make sense when multiple users might use the same provider.
// @@unique([provider, providerAccountId]): Ensures that the combination of provider and providerAccountId is unique, which is the correct approach for cases where users can authenticate using the same provider (e.g., Google) but have different providerAccountIds. 
model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String[] @db.ObjectId
  access_token String[] @db.ObjectId
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  
  user User @relation(fields: [userId] , references: [id] , onDelete : Cascade)
  @@unique([provider,providerAccountId]) 
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId] , references: [id] , onDelete : Cascade)

}

model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token String @unique
  expires DateTime
  
  @@unique([identifier,token])
}

model Movie{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  gerne String
  duration String
}

// later we can add feature here to rate a movie and other 